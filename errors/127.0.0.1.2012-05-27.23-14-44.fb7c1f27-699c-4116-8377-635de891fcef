(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/jose/DESARROLLO/web2py199/applications/streamlog/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    db.t_log.id.readable=False\n    db.t_log.server.readable=False\n    \n    db.t_log.type_log.readable=False\n    links = [lambda row:  INPUT(_type=\'button\',_value=\'Load Table\', _onclick=\'loadTable(\'+str(row.id)+\')\')]\n    links += [lambda row:  INPUT(_type=\'button\',_value=\'START STREAM\', _onclick=\'createStream(\'+str(row.id)+\')\')]\n    form=SQLFORM.grid(db.t_log, selectable=False, csv=False,create=False, deletable=False, editable=False, links=links, user_signature=False)\n    return dict(message=T(\'Hello World2\'), form=form)\n\n\'\'\'\n@auth.requires_login()\ndef getConnectionData():\n    \n    id_log=request.args[0]\n    ip=\'\'\n    port=\'\'\n    name_log=\'\'\n    \n    data_connection=db((db.t_log.id==id_log)&(db.t_log.server==db.t_server.id)).select(db.t_log.name,db.t_server.IP,db.t_server.port)\n  \n    for row in data_connection:\n        ip=row.t_server.IP\n        port=row.t_server.port\n        name_log=row.t_log.name\n        \n    \n    regex=db((db.t_log.id==id_log)&(db.t_log.type_log==db.t_type_log.id)).select()\n    \n    regex_code=\'\'\n    for row in regex:\n        regex_code=row.t_type_log.regex_code\n    \n    #return response.json([{\'name_log\': name_log,\'IP\': ip,\'port\': port,\'regex\': regex_code}])\n    return dict(name_log=name_log, ip=ip, port=port,regex=regex_code)\n\n\'\'\'\n\n@auth.requires_login()\ndef getConnectionData():\n    \n    id_log=request.args[0]\n    ip=\'\'\n    port=\'\'\n    name_log=\'\'\n    \n    t_log=db(db.t_log.id==id_log).select(db.t_log.type_log)\n    for row in t_log:\n        server=row.server\n        name_log=row.name\n                       \n    data_connection=db(db.t_server.id==server).select(db.t_server.IP,db.t_server.port)\n  \n    for row in data_connection:\n        ip=row.t_server.IP\n        port=row.t_server.port\n        \n    \n    t_log=db(db.t_log.id==id_log).select(db.t_log.type_log)\n    for row in t_log:\n        type_log=row.type_log\n        \n    regex=db(db.t_type_log.id==type_log).select(db.t_type_log.regex_code)\n    \n    regex_code=\'\'\n    for row in regex:\n        regex_code=row.t_type_log.regex_code\n    \n    #return response.json([{\'name_log\': name_log,\'IP\': ip,\'port\': port,\'regex\': regex_code}])\n    return dict(name_log=name_log, ip=ip, port=port,regex=regex_code)\n\n\n@auth.requires_login()\ndef getTypeTable():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    table=\'\'\n    id_log=request.args[0]\n    t_log=db(db.t_log.id==id_log).select(db.t_log.type_log)\n    for row in t_log:\n        type_log=row.type_log\n        \n    type_table=db(db.t_type_log.id==type_log).select(db.t_type_log.html_table)\n    \n    for row in type_table:\n        table=row.html_table\n        \n    \n    return table\n\n\'\'\'\n@auth.requires_login()\ndef getTypeTable():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    table=\'\'\n    id_log=request.args[0]\n    type_table=db((db.t_log.id==id_log)&(db.t_log.type_log==db.t_type_log.id)).select(db.t_type_log.html_table)\n    for row in type_table:\n        table=row.html_table\n        \n    \n    return table\n\'\'\'\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    auth.settings.actions_disabled.append(\'register\')\n    auth.settings.actions_disabled.append(\'request_reset_password\')\n    return dict(form=auth())\n\ndef error():\n    return dict()\n\n\n@auth.requires_login()\ndef project_manage():\n    \n    form = SQLFORM.smartgrid(db.t_project,csv=False)\n    return locals()\n\n@auth.requires_login()\ndef server_manage():\n\n    form=SQLFORM.grid(db.t_server,csv=False)\n    return locals()\n\n@auth.requires_login()\ndef log_manage():\n \n    #form = SQLFORM.smartgrid(db.t_log,constraints=dict(t_log=query), selectable=True,searchable=False, csv=False,showbuttontext=True,onupdate=auth.archive)\n    #form = SQLFORM.smartgrid(db.t_log)\n    form=SQLFORM.grid(db.t_log,csv=False)\n    return locals()\n\n@auth.requires_login()\ndef type_log_manage():\n\n    form=SQLFORM.grid(db.t_type_log,csv=False)\n    return locals()\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs bust be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(getConnectionData)\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/home/jose/DESARROLLO/web2py199/gluon/restricted.py", line 194, in restricted\n    exec ccode in environment\n  File "/home/jose/DESARROLLO/web2py199/applications/streamlog/controllers/default.py", line 210, in <module>\n  File "/home/jose/DESARROLLO/web2py199/gluon/globals.py", line 149, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/jose/DESARROLLO/web2py199/gluon/tools.py", line 2456, in f\n    return action(*a, **b)\n  File "/home/jose/DESARROLLO/web2py199/applications/streamlog/controllers/default.py", line 66, in getConnectionData\n    server=row.server\n  File "/home/jose/DESARROLLO/web2py199/gluon/dal.py", line 3851, in __getattr__\n    return self[key]\n  File "/home/jose/DESARROLLO/web2py199/gluon/dal.py", line 3842, in __getitem__\n    return dict.__getitem__(self, key)\nKeyError: \'server\'\n'
p10
s.